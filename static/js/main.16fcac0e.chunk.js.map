{"version":3,"sources":["layouts/Header.js","components/Card/Card.js","components/List.js","components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["HeaderStyled","styled","div","Header","className","Card","movie","to","imdbID","src","Poster","alt","Title","Year","Type","List","useState","moviesList","setMoviesList","searchTerm","error","loading","state","setState","useEffect","getInfo","api","a","fetch","res","json","data","Search","handleSubmit","e","preventDefault","console","log","onSubmit","type","placeholder","onChange","target","value","autoFocus","map","index","key","MovieStyled","Movie","id","useParams","setMovie","getMovie","option","width","Country","Director","Genre","Language","Plot","Actors","AppStyled","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.16fcac0e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst HeaderStyled = styled.div`\r\n    \r\n`;\r\n\r\nfunction Header() {\r\n    return (\r\n        <HeaderStyled>\r\n            <nav className=\"navbar navbar-light bg-dark text-white p-2 border-bottom border-white\">\r\n                <h3 className=\"text-white\">\r\n                    MovieApp\r\n                </h3>\r\n            </nav>\r\n        </HeaderStyled>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { Fragment } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Card({ movie }) {\r\n    return (\r\n        <Fragment>\r\n\r\n            <div className=\"col-sm-6 col-md-6 col-lg-4 col-sl-3 mb-4\">\r\n                <Link to={`/movie/${ movie.imdbID }`} className=\"card\">\r\n    \r\n                    <div className=\"card-header p-0\">\r\n    \r\n                        <img src={ movie.Poster } alt={ movie.Title } className=\"card-img-top\" />\r\n    \r\n                    </div>\r\n                    \r\n                    <div className=\"card-body\">\r\n    \r\n                        <h4>{ movie.Title } { movie.Year }</h4>\r\n    \r\n                        <p>{ movie.Type }</p>\r\n    \r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, { Fragment, useEffect, useState } from 'react';\r\n\r\nimport Card from './Card/Card';\r\n\r\nfunction List() {\r\n\r\n    const [moviesList, setMoviesList] = useState([]);\r\n\r\n    const [state, setState] = useState({\r\n        searchTerm: '',\r\n        error: '',\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getInfo();\r\n    }, []);\r\n\r\n    const api = 'http://www.omdbapi.com/?i=tt3896198&apikey=1513ca41&';\r\n    const option = 's=hobbit';\r\n\r\n    const getInfo = async () => {\r\n        const res = await fetch(`${api}${option}`);\r\n        const data = await res.json();\r\n        setMoviesList(data.Search);\r\n        setState({ loading: false });\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (!state.searchTerm) {\r\n            return setState(\r\n                { \r\n                    error: 'Please write a valid text.'\r\n                }\r\n            );\r\n        }\r\n\r\n        try {\r\n            const res = await fetch(`${api}&s=${state.searchTerm}`);\r\n            const data = await res.json();\r\n            if (!data.Search) {\r\n                return setState(\r\n                    { \r\n                        error: 'There are no results.' \r\n                    }\r\n                );\r\n            }\r\n            setMoviesList(data.Search);\r\n            setState(\r\n                { \r\n                    error: '',\r\n                    searchTerm: ''\r\n                }\r\n            )\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            {\r\n                state.loading ? <h2 className=\"text-light text-center p-4\">Loading...</h2> : ''\r\n            }\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4 offset-md-4 p-4\">\r\n                    <form onSubmit={ e => handleSubmit(e) }>\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\" \r\n                            placeholder=\"Search a movie\" \r\n                            onChange={\r\n                                e => setState({ searchTerm: e.target.value })\r\n                            }\r\n                            autoFocus\r\n                            value={ state.searchTerm }\r\n                            />\r\n                    </form>\r\n                    <p className=\"text-white mt-2\">\r\n                        { state.error ? state.error : '' }\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"row\">\r\n                {\r\n                    moviesList.map((movie, index) => {\r\n                        return <Card movie={ movie } key={ index } />\r\n                    })\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default List;","import React, { useEffect, useState } from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst MovieStyled = styled.div`\r\n    .intro{\r\n        color: #111;\r\n        font-size: 20px;\r\n    }\r\n    .texto{\r\n        color: #ccc;\r\n        font-style: italic;\r\n        font-weight: normal;\r\n        font-size: 17px;\r\n    }\r\n`;\r\n\r\nfunction Movie() {\r\n\r\n    const { id } = useParams();\r\n\r\n    const [movie, setMovie] = useState({});\r\n\r\n    useEffect(() => {\r\n        getMovie();\r\n    }, []);\r\n\r\n    const option = `i=${id}&plot=full`;\r\n    const api = `http://www.omdbapi.com/?${option}&apikey=1513ca41`;\r\n\r\n    const getMovie = async () => {\r\n        const res = await fetch(`${api}`);\r\n        const data = await res.json();\r\n        setMovie(data);\r\n    }\r\n\r\n    return (\r\n        <MovieStyled>\r\n            <div className=\"row border p-0 m-0\">\r\n                <div className=\"col-12 col-md-4 p-0\">\r\n                    <div className=\"p-2\">\r\n                        <img src={ movie.Poster } alt=\"\" width=\"500px\" className=\"img-fluid\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12 col-md-8 p-0 text-white\">\r\n                    <div className=\"p-2\">\r\n                        <h5>\r\n                            <span className=\"intro\">Title: </span><span className=\"texto\">{ movie.Title }</span>\r\n                        </h5>\r\n                        <h5>\r\n                            <span className=\"intro\">Type: </span><span className=\"texto\">{ movie.Type }</span>\r\n                        </h5>\r\n                        <h5>\r\n                            <span className=\"intro\">Year: </span><span className=\"texto\">{ movie.Year }</span>\r\n                        </h5>\r\n                        <h5>\r\n                            <span className=\"intro\">Country: </span><span className=\"texto\">{ movie.Country }</span>\r\n                        </h5>\r\n                        <h5>\r\n                            <span className=\"intro\">Director: </span><span className=\"texto\">{ movie.Director }</span>\r\n                        </h5>\r\n                        <h5>\r\n                            <span className=\"intro\">Genre: </span><span className=\"texto\">{ movie.Genre }</span>\r\n                        </h5>\r\n                        <h5>\r\n                            <span className=\"intro\">Language: </span><span className=\"texto\">{ movie.Language }</span>\r\n                        </h5>\r\n                        <h5>\r\n                            <span className=\"intro\">Sinopsis: </span><span className=\"texto\">{ movie.Plot }</span>\r\n                        </h5>\r\n                        <h5>\r\n                            <span className=\"intro\">Actors: </span><span className=\"texto\">{ movie.Actors }</span>\r\n                        </h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </MovieStyled>\r\n    );\r\n}\r\n\r\nexport default Movie;","import React from 'react';\n\nimport styled from 'styled-components';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\n\nimport Header from './layouts/Header';\nimport List from './components/List';\nimport Movie from './components/Movie'\n\nconst AppStyled = styled.div`\n  .main{\n    height: 100vh;\n  }\n  .container {\n    background: #343A40;\n  }\n`;\n\nfunction App() {\n  return (\n    <AppStyled>\n\n      <Router>\n\n        <Link to=\"/\">\n          <Header/>\n        </Link>\n\n        <Switch>\n\n          <Route path=\"/\" exact>\n            <main className=\"bg-dark\">\n                <div className=\"container\">\n                    <List />\n                </div>\n            </main>\n          </Route>\n\n          <Route path=\"/movie/:id\" exact>\n            <main className=\"bg-dark pt-4 main\">\n                <div className=\"container\">\n                    <Movie />\n                </div>\n            </main>\n          </Route>\n\n        </Switch>\n\n      </Router>\n      \n    </AppStyled>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}